//
//  SigninController.swift
//  LastBite
//
//  Created by Andr√©s Romero on 14/04/25.
//

import Foundation
import Combine // Necesario

class SignInController: ObservableObject {

    // MARK: - Published Properties (Estado para la Vista)
    @Published var email: String = ""
    @Published var password: String = ""
    @Published var isLoading: Bool = false
    @Published var errorMessage: String? = nil // Mensaje de error de las acciones
    @Published var successMessage: String? = nil // Mensaje de √©xito (ej: reset password)
    @Published var didSignInSuccessfully: Bool = false // Para notificar a la vista

    // MARK: - Dependencies
    // Puede ser inyectado o usar el singleton
    private let authService: SignInUserService

    // MARK: - Initialization
    init(authService: SignInUserService = SignInUserService.shared) {
        self.authService = authService
        // Sincronizar con el estado inicial del servicio si es necesario
        // (Aunque generalmente el usuario empieza con campos vac√≠os en esta pantalla)
         self.email = authService.email ?? ""
         print("üîë SignInController initialized.")
    }

    // MARK: - Public Actions

    /// Intenta iniciar sesi√≥n usando los datos actuales del controller.
    func signInUser() {
        print("üîë Controller attempting sign in...")
        // Asigna los valores del controller al servicio ANTES de llamar a la acci√≥n
        authService.email = self.email
        authService.password = self.password

        // Actualiza el estado de carga y limpia mensajes previos
        isLoading = true
        errorMessage = nil
        successMessage = nil
        didSignInSuccessfully = false // Resetear estado de √©xito

        authService.signInUser { [weak self] result in
            guard let self = self else { return }
            // Siempre actualiza la UI en el hilo principal
            DispatchQueue.main.async {
                self.isLoading = false // Termina la carga
                switch result {
                case .success:
                    print("‚úÖ Controller: Sign in successful.")
                    // El userId ya deber√≠a estar actualizado en authService.shared
                    // Notifica a la vista que el login fue exitoso
                    self.didSignInSuccessfully = true
                case .failure(let error):
                    print("‚ùå Controller: Sign in failed: \(error.localizedDescription)")
                    // Usa el mensaje de error del servicio o uno propio
                    self.errorMessage = self.authService.errorMessage.isEmpty ? error.localizedDescription : self.authService.errorMessage
                    // Limpia la contrase√±a por seguridad despu√©s de un fallo
                    self.password = ""
                    // Limpia la contrase√±a en el servicio tambi√©n
                    self.authService.password = nil
                }
            }
        }
    }

    /// Intenta resetear la contrase√±a para el email actual del controller.
    func resetPassword() {
        print("üîë Controller attempting password reset...")
        // Aseg√∫rate que el email est√© en el servicio
        authService.email = self.email

        // Limpia mensajes previos
        // isLoading no se usa aqu√≠, pero podr√≠as a√±adirlo si la operaci√≥n tarda
        errorMessage = nil
        successMessage = nil

        authService.resetPassword { [weak self] result in
             guard let self = self else { return }
             DispatchQueue.main.async {
                switch result {
                case .success(let message):
                     print("‚úÖ Controller: Password reset email sent.")
                    self.successMessage = message // Muestra el mensaje de √©xito
                case .failure(let error):
                     print("‚ùå Controller: Password reset failed: \(error.localizedDescription)")
                    // Intenta obtener el mensaje de error espec√≠fico del servicio
                    self.errorMessage = self.authService.errorMessage.isEmpty ? error.localizedDescription : self.authService.errorMessage
                }
            }
        }
    }
}
