//
//  HybridCartRepository.swift
//  LastBite
//
//  Created by Andr√©s Romero on 24/04/25.
//

import Foundation

// Repositorio "Orquestador" que implementa la estrategia "API + Guardado en Cach√© (Realm)"
final class HybridCartRepository: CartRepository {

    private let apiRepository: CartRepository // El repo que habla con la API
    private let localRepository: LocalCartRepository // El repo que habla con Realm

    // Inyecta ambos repositorios
    init(apiRepository: CartRepository, localRepository: LocalCartRepository) {
        self.apiRepository = apiRepository
        self.localRepository = localRepository
        print("üì¶ CachingCartRepository initialized.")
    }

    // MARK: - Implementaci√≥n del Protocolo CartRepository

    func fetchActiveCart(for userId: Int) async throws -> Cart {
        do {
            // 1. Intenta obtener de la API PRIMERO
            let domainCart = try await apiRepository.fetchActiveCart(for: userId)

            // 2. Si API OK, guarda en local en segundo plano (como antes)
            Task.detached(priority: .utility) {
                try? await self.localRepository.saveCart(domainCart) // Usa try? para ignorar errores de guardado local si no son cr√≠ticos
            }
            // 3. Devuelve el resultado de la API
            return domainCart

        } catch let error as ServiceError where error.isNetworkConnectionError { // <-- Captura error espec√≠fico de red
            // 4. SI la API fall√≥ por conexi√≥n, INTENTA leer de LOCAL
            print("‚ö†Ô∏è API failed due to network, attempting to fetch from local Realm store...")
            do {
                // Llama al m√©todo del repositorio local (que ahora debe ser async throws tambi√©n)
                let localCart = try await localRepository.fetchActiveCart(for: userId)
                print("‚úÖ Fetched active cart from local store successfully.")
                return localCart // Devuelve el dato local como backup
            } catch let localError {
                // Si tambi√©n falla localmente, relanza el error local o el original
                print("‚ùå Failed to fetch active cart from local store as well: \(localError.localizedDescription)")
                throw localError // O puedes relanzar el 'error' original de la API
            }
        } catch {
            // 5. Si la API fall√≥ por OTRA raz√≥n (ej. 404 Not Found, 500 Server Error), relanza el error original
            print("‚ùå API failed for non-network reason: \(error.localizedDescription). Not attempting local fetch.")
            throw error
        }
    }

    func updateCartStatus(cartId: Int, status: String, userId: Int) async throws {
        // 1. Intenta actualizar en la API
        try await apiRepository.updateCartStatus(cartId: cartId, status: status, userId: userId)

        // 2. Si API OK, intenta actualizar en local
        Task(priority: .utility) { @MainActor in
             do {
                 print("Updating cart status in realm...")
                try await self.localRepository.updateCartStatus(cartId: cartId, status: status, userId: userId)
             } catch {
                 print("‚ö†Ô∏è CachingCartRepository: Failed to update local cart status: \(error.localizedDescription)")
             }
         }
    }

    func fetchCartProducts(for cartId: Int) async throws -> [CartProduct] {
        
        
        do {
            // 1. Intenta obtener de la API
            let domainCartProducts = try await apiRepository.fetchCartProducts(for: cartId)

            // 2. Si API OK, intenta guardar en local (la versi√≥n b√°sica)
            Task(priority: .utility) { @MainActor in
                // Necesitar√≠amos un m√©todo localRepository.saveCartProducts si quisi√©ramos guardar esta versi√≥n
                // Por ahora, asumimos que fetchDetailed es el importante para guardar
                print("‚ÑπÔ∏è CachingCartRepository: Basic cart products fetched from API, local cache not updated with this basic info.")
            }
            // 3. Devuelve resultado API
            return domainCartProducts
        }
        catch {
            print("‚ö†Ô∏è CachingCartRepository: Failed to fetch cart products from API: \(error.localizedDescription)")
            throw error
        }
    }

    // Dentro de CachingCartRepository.swift

    func fetchDetailedCartProducts(for cartId: Int) async throws -> [DetailedCartProduct] {
            do {
                print("SYNCHRONIZING CART")
                try await synchronizeCart(cartId: cartId)
                // 1. Intenta obtener de la API PRIMERO
                 print("üõí CachingRepo: Attempting to fetch detailed products from API for cart \(cartId)...")
                let domainDetailedProducts = try await apiRepository.fetchDetailedCartProducts(for: cartId)
                 print("   ‚úÖ CachingRepo: API fetch successful, \(domainDetailedProducts.count) items.")

                // 2. Si API OK, GUARDA en local en segundo plano
                Task.detached(priority: .utility) { @MainActor in // Ejecuta en MainActor por seguridad con Realm
                    do {
                        print("   üíæ [BG Task] Saving \(domainDetailedProducts.count) detailed products locally...")
                        // Llama al m√©todo async de LocalCartRepository
                        try await self.localRepository.saveDetailedProducts(domainDetailedProducts, for: cartId)
                         print("   üíæ [BG Task] Local save successful.")
                    } catch {
                        print("   ‚ö†Ô∏è [BG Task] CachingCartRepository: Failed to save detailed cart products locally: \(error.localizedDescription)")
                    }
                }
                // 3. Devuelve el resultado FRESCO de la API
                return domainDetailedProducts

            } catch let error as ServiceError where error.isNetworkConnectionError {
                // 4. SI la API fall√≥ por CONEXI√ìN, intenta leer de LOCAL como backup
                 print("‚ö†Ô∏è CachingRepo: API fetch failed due to network error. Attempting local fallback...")
                 do {
                     // Llama al m√©todo async de LocalCartRepository para leer
                     let localDetailedProducts = try await localRepository.fetchDetailedCartProducts(for: cartId)
                     print("   ‚úÖ CachingRepo: Fetched \(localDetailedProducts.count) items from local store as backup.")
                     // Devuelve los datos LOCALES como backup
                     return localDetailedProducts
                 } catch let localError {
                      print("   ‚ùå CachingRepo: Failed to fetch from local store as well: \(localError.localizedDescription). Rethrowing original API error.")
                     // Si la lectura local tambi√©n falla, relanza el error ORIGINAL de la API
                     throw error
                 }
            } catch {
                // 5. SI la API fall√≥ por OTRA raz√≥n (ej: 404, 500, error de decodificaci√≥n de API),
                //    NO intentamos leer local y simplemente relanzamos el error de la API.
                 print("‚ùå CachingRepo: API fetch failed for non-network reason: \(error.localizedDescription). Not attempting local fallback.")
                throw error
            }
        } 

    // --- M√âTODO addProductToCart (Local First) ---
        func addProductToCart(cartId: Int, product: Product, quantity: Int) async throws {
            print("üõí HybridRepo: AddProduct - Attempting LOCAL write first...")
            // 1. Intenta a√±adir/actualizar en LOCAL PRIMERO (y marcar needsSync=true)
            try await localRepository.addProductToCart(cartId: cartId, product: product, quantity: quantity)
            print("   ‚úÖ HybridRepo: Local add/update successful.")

            // 2. Si local OK, INTENTA sincronizar con API en segundo plano
            Task.detached(priority: .utility) {
                do {
                    print("   ‚òÅÔ∏è [BG Task] Attempting API add/update...")
                    // Llama al m√©todo API correspondiente
                    try await self.apiRepository.addProductToCart(cartId: cartId, product: product, quantity: quantity) // Asume que API necesita quantity total o ajusta
                     print("   ‚òÅÔ∏è [BG Task] API add/update successful. Item should be marked synced locally if API call succeeded AFTER sync method.")
                     // Opcional: podr√≠as llamar a markAsSynced aqu√≠ si la API tuvo √©xito,
                     // pero es mejor dejarlo para el synchronizeCart expl√≠cito.
                } catch {
                    print("   ‚ö†Ô∏è [BG Task] API add/update FAILED (needs sync later): \(error.localizedDescription)")
                    // No hacemos nada m√°s, el item ya est√° marcado localmente como needsSync=true
                }
            }
            // Retorna √©xito inmediatamente despu√©s de la escritura local exitosa
        }

        // --- M√âTODO updateProductQuantity (Local First) ---
        func updateProductQuantity(cartId: Int, productId: Int, quantity: Int) async throws {
             print("üõí HybridRepo: UpdateQuantity - Attempting LOCAL write first...")
            // 1. Intenta actualizar en LOCAL PRIMERO (y marcar needsSync=true)
            try await localRepository.updateProductQuantity(cartId: cartId, productId: productId, quantity: quantity)
             print("   ‚úÖ HybridRepo: Local quantity update successful.")

            // 2. Si local OK, INTENTA sincronizar con API en segundo plano
             Task.detached(priority: .utility) {
                  do {
                       print("   ‚òÅÔ∏è [BG Task] Attempting API quantity update...")
                      try await self.apiRepository.updateProductQuantity(cartId: cartId, productId: productId, quantity: quantity)
                       print("   ‚òÅÔ∏è [BG Task] API quantity update successful.")
                       // Opcional: Podr√≠as intentar marcar como sincronizado aqu√≠
                       // try? await self.localRepository.markItemAsSynced(productId: productId)
                  } catch {
                      print("   ‚ö†Ô∏è [BG Task] API quantity update FAILED (needs sync later): \(error.localizedDescription)")
                  }
              }
              // Retorna √©xito inmediatamente
        }

        // --- M√âTODO removeProductFromCart (Local First) ---
        func removeProductFromCart(cartId: Int, productId: Int) async throws {
            print("ACAAAAAAAAAAAAAAAAAA")
             print("üõí HybridRepo: RemoveProduct - Attempting LOCAL mark first...")
            // 1. Intenta MARCAR como borrado en LOCAL PRIMERO (y marcar needsSync=true)
            //    (Aseg√∫rate que LocalCartRepository.removeProductFromCart haga esto)
            try await localRepository.removeProductFromCart(cartId: cartId, productId: productId)
             print("   ‚úÖ HybridRepo: Local mark for removal successful.")

            // 2. Si local OK, INTENTA sincronizar con API en segundo plano
            Task.detached(priority: .utility) {
                do {
                     print("   ‚òÅÔ∏è [BG Task] Attempting API remove...")
                    try await self.apiRepository.removeProductFromCart(cartId: cartId, productId: productId)
                     print("   ‚òÅÔ∏è [BG Task] API remove successful.")
                     // Si API OK, ahora s√≠ borra localmente (o m√°rcalo sincronizado)
                     try? await self.localRepository.markItemAsSynced(productId: productId) // Esto lo borrar√° si est√° marcado
                } catch {
                     print("   ‚ö†Ô∏è [BG Task] API remove FAILED (needs sync later): \(error.localizedDescription)")
                    
                }
            }
             // Retorna √©xito inmediatamente
        }
    
    func synchronizeCart(cartId: Int) async throws {
            print("üîÑ CachingRepo: Starting cart synchronization for cart \(cartId)...")

            // 1. Obtener items locales que necesitan sincronizaci√≥n
            //    Necesitamos un m√©todo en LocalCartRepository para esto
            let itemsToSync = try await localRepository.fetchItemsNeedingSync(for: cartId)
             print("   Sync: Found \(itemsToSync.count) items needing sync.")

            guard !itemsToSync.isEmpty else {
                print("   Sync: No items to sync.")
                return // Nada que hacer
            }

            // 2. Iterar e intentar sincronizar cada uno con la API
            var syncErrors: [Error] = []
            for item in itemsToSync {
                do {
                    // Llama al m√©todo API apropiado basado en el estado local
                    if item.isDeletedLocally { // Asume que a√±adiste este campo a RealmCartItem
                        print("   Sync: Attempting to remove item \(item.productId) via API...")
                        try await apiRepository.removeProductFromCart(cartId: item.cartId, productId: item.productId)
                    } else if item.quantity > 0 { // Asume que 'add' y 'update' se manejan con updateQuantity o un endpoint inteligente
                         print("   Sync: Attempting to update quantity for item \(item.productId) to \(item.quantity) via API...")
                         // Necesitar√≠as una forma de saber si fue un add o update, o un endpoint que haga upsert.
                         // Llamaremos a updateQuantity por ahora. ¬°ESTO PUEDE NECESITAR AJUSTES!
                         try await apiRepository.updateProductQuantity(cartId: item.cartId, productId: item.productId, quantity: item.quantity)
                    }
                    // else: Podr√≠a haber otros estados?

                    // 3. Si la API tuvo √©xito, marca el item local como sincronizado
                    print("      ‚úÖ API Sync successful for item \(item.productId). Marking as synced locally.")
                     try await localRepository.markItemAsSynced(productId: item.productId) // Necesitas este m√©todo en LocalCartRepository

                } catch {
                     print("      ‚ùå API Sync FAILED for item \(item.productId): \(error.localizedDescription)")
                     syncErrors.append(error)
                     // Decide si continuar con los dem√°s o detenerte aqu√≠
                }
            }

            // 4. Si hubo alg√∫n error durante la sincronizaci√≥n, lanza un error general
            if !syncErrors.isEmpty {
                 print("   Sync: Finished with \(syncErrors.count) errors.")
                // Lanza el primer error encontrado o un error gen√©rico
                throw syncErrors.first ?? ServiceError.syncFailed // Necesitas definir ServiceError.syncFailed
            } else {
                 print("   Sync: All items synchronized successfully.")
            }
        }
}
